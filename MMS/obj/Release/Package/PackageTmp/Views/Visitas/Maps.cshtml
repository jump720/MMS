@model IEnumerable<MMS.Models.Visita>
@{
    ViewBag.Title = "Visits";
    ViewBag.Subtitle = "Maps";
    Layout = "~/Views/Shared/_LayoutTT.cshtml";
}
@section Styles
{
    <style>
        #map {
            height: 600px;
            width: 100%;
        }

        .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
        }

            #pac-input:focus {
                border-color: #4d90fe;
            }

        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

            #type-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
            }

        #target {
            width: 345px;
        }
    </style>
}
@section Scripts
{


}
<div class="row clearfix">
    <div class="col-md-12">
        <div class="card" id="cardForm">
            <div class="header bg-blue">
                <h2>
                    @ViewBag.Title <small>@ViewBag.Subtitle</small>
                </h2>
            </div>
            <div class="body">
                <input id="pac-input" class="controls" type="text" placeholder="Search Box">
                <div id="map"></div>
                <script>
                    function initMap() {
                        var pos = { lat: 6.244203, lng: -75.5812119} ;
                        var map = new google.maps.Map(document.getElementById('map'), {
                            zoom: 20,
                            center: pos
                        });

                        if (navigator.geolocation) {
                            // Código de la aplicación
                            navigator.geolocation.getCurrentPosition(function (objPosition) {
                                //var lon = objPosition.coords.longitude;
                                //var lat = objPosition.coords.latitude;

                                var pos = {
                                    lat: objPosition.coords.latitude,
                                    lng: objPosition.coords.longitude
                                };

                            }, function (objPositionError) {
                                pos = { lat: 3.4641873, lng: -76.5314253 };
                                map.setCenter(pos);
                            }, {
                                maximumAge: 75000,
                                timeout: 15000
                            });
                        }else {
                            pos = { lat: 3.4641873, lng: -76.5314253 };
                            map.setCenter(pos);
                        }





                        // Create the search box and link it to the UI element.
                        var input = document.getElementById('pac-input');
                        var searchBox = new google.maps.places.SearchBox(input);
                        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                        // Bias the SearchBox results towards current map's viewport.
                        map.addListener('bounds_changed', function() {
                            searchBox.setBounds(map.getBounds());
                        });
                        var markers = [];
                        // Listen for the event fired when the user selects a prediction and retrieve
                        // more details for that place.
                        searchBox.addListener('places_changed', function() {
                            var places = searchBox.getPlaces();

                            if (places.length == 0) {
                                return;
                            }

                            // Clear out the old markers.
                            markers.forEach(function(marker) {
                                marker.setMap(null);
                            });
                            markers = [];

                            // For each place, get the icon, name and location.
                            var bounds = new google.maps.LatLngBounds();
                            places.forEach(function(place) {
                                if (!place.geometry) {
                                    console.log("Returned place contains no geometry");
                                    return;
                                }
                                var icon = {
                                    url: place.icon,
                                    size: new google.maps.Size(71, 71),
                                    origin: new google.maps.Point(0, 0),
                                    anchor: new google.maps.Point(17, 34),
                                    scaledSize: new google.maps.Size(25, 25)
                                };

                                // Create a marker for each place.
                                markers.push(new google.maps.Marker({
                                    map: map,
                                    icon: icon,
                                    title: place.name,
                                    position: place.geometry.location
                                }));

                                if (place.geometry.viewport) {
                                    // Only geocodes have viewport.
                                    bounds.union(place.geometry.viewport);
                                } else {
                                    bounds.extend(place.geometry.location);
                                }
                            });
                            map.fitBounds(bounds);
                        });

                        var visitLocations = [@foreach(var v in Model)
                                {
                                    <text>
                                                {
                                                    Id: @v.Id,
                                                    NombreEstablecimiento: @Html.Raw(Json.Encode(v.NombreEstablecimiento)),
                                                    RazonSocial: @Html.Raw(Json.Encode(v.RazonSocial)),
                                                    Fecha: @Html.Raw(Json.Encode(v.Fecha.ToString("u").Substring(0, 10))),
                                                    Administrador: @Html.Raw(Json.Encode(v.Administrador)),
                                                    Telefono: @Html.Raw(Json.Encode(v.Telefono)),
                                                    Direccion: @Html.Raw(Json.Encode(v.Direccion)),
                                                    Barrio: @Html.Raw(Json.Encode(v.Barrio)),
                                                    Location: `@v.Ciudad.departamentos.paises.PaisDesc - @v.Ciudad.departamentos.DepartamentoDesc - @v.Ciudad.CiudadDesc`,
                                                    Latitud: @v.Latitud.ToString().Replace(',','.'),
                                                    Longitud: @v.Longitud.ToString().Replace(',', '.'),
                                                },
                                                </text>
                                }];

                        for(visit of visitLocations)
                        {

                            var contentString = ` `+
                                                `<div >`+
                                                `  <h5 style="margin: 0px;"><b>${visit.NombreEstablecimiento}</b></h1>`+
                                                //`  <p>${visit.RazonSocial}</p>`+

                                                `  <p style="margin: 0px;">${visit.Administrador}</p>`+
                                                `  <p style="margin: 0px;">${visit.Telefono}</p>`+
                                                `  <p style="margin: 0px;">${visit.Direccion}</p>`+
                                                `  <p style="margin: 0px;">${visit.Barrio}</p>`+
                                                `  <p style="margin: 0px;">${visit.Fecha}</p>`+
                                                `</div>`;
                            var infowindow = new google.maps.InfoWindow();
                       

                            var marker = new google.maps.Marker({
                                title: visit.NombreEstablecimiento,
                                position: new google.maps.LatLng(visit.Latitud, visit.Longitud),
                                map: map
                            });


                            google.maps.event.addListener(marker,'click', (function(marker,contentString,infowindow){
                                return function() {
                                    infowindow.setContent(contentString);
                                    infowindow.open(map,marker);
                                };
                            })(marker,contentString,infowindow));



                        }



                    }
                </script>
                <!-- Replace the value of the key parameter with your own API key. -->
                <script async defer
                        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDjIbeCicEy-8wAjluHL5tlMJW2bH-PH5s&libraries=places&callback=initMap">
                </script>
            </div>

        </div>
    </div>
</div>
